Продумайте структуру класса Кот. Какие поля и методы будут актуальны для приложения, которое является
а) информационной системой ветеринарной клиники
б) архивом выставки котов
в) информационной системой Театра кошек Ю. Д. Куклачёва
Можно записать в текстовом виде, не обязательно реализовывать в java.


import java.util.ArrayList;
import java.util.List;

public class Cat {
    /*
    РџСЂРѕРґСѓРјР°Р№С‚Рµ СЃС‚СЂСѓРєС‚СѓСЂСѓ РєР»Р°СЃСЃР° РљРѕС‚. РљР°РєРёРµ РїРѕР»СЏ Рё РјРµС‚РѕРґС‹ Р±СѓРґСѓС‚ Р°РєС‚СѓР°Р»СЊРЅС‹ РґР»СЏ РїСЂРёР»РѕР¶РµРЅРёСЏ, РєРѕС‚РѕСЂРѕРµ СЏРІР»СЏРµС‚СЃСЏ
    Р°) РёРЅС„РѕСЂРјР°С†РёРѕРЅРЅРѕР№ СЃРёСЃС‚РµРјРѕР№ РІРµС‚РµСЂРёРЅР°СЂРЅРѕР№ РєР»РёРЅРёРєРё
    Р±) Р°СЂС…РёРІРѕРј РІС‹СЃС‚Р°РІРєРё РєРѕС‚РѕРІ
    РІ) РёРЅС„РѕСЂРјР°С†РёРѕРЅРЅРѕР№ СЃРёСЃС‚РµРјРѕР№ РўРµР°С‚СЂР° РєРѕС€РµРє Р®. Р”. РљСѓРєР»Р°С‡С‘РІР°
    РњРѕР¶РЅРѕ Р·Р°РїРёСЃР°С‚СЊ РІ С‚РµРєСЃС‚РѕРІРѕРј РІРёРґРµ, РЅРµ РѕР±СЏР·Р°С‚РµР»СЊРЅРѕ СЂРµР°Р»РёР·РѕРІС‹РІР°С‚СЊ РІ java.
     */
    /*
    1. Р РµР°Р»РёР·СѓР№С‚Рµ 1 РёР· РІР°СЂРёР°РЅС‚РѕРІ РєР»Р°СЃСЃР° Cat РёР· РїСЂРµРґС‹РґСѓС‰РµРіРѕ Р·Р°РґР°РЅРёСЏ, РјРѕР¶РЅРѕ РёСЃРїРѕР»СЊР·РѕРІР°С‚СЊ РЅРµ РІСЃРµ РїСЂРёРґСѓРјР°РЅРЅС‹Рµ РїРѕР»СЏ Рё РјРµС‚РѕРґС‹.
    РЎРѕР·РґР°Р№С‚Рµ РЅРµСЃРєРѕР»СЊРєРѕ СЌРєР·РµРјРїР»СЏСЂРѕРІ СЌС‚РѕРіРѕ РєР»Р°СЃСЃР°, РІС‹РІРµРґРёС‚Рµ РёС… РІ РєРѕРЅСЃРѕР»СЊ.
    2. Р”РѕР±РµР№С‚РµСЃСЊ С‚РѕРіРѕ, С‡С‚РѕР±С‹ РїСЂРё РІС‹РІРѕРґРµ РІ РєРѕРЅСЃРѕР»СЊ РѕР±СЉРµРєС‚Р° С‚РёРїР° Cat,
    РІС‹РІРѕРґРёР»Р°СЃСЊ РµРіРѕ РєР»РёС‡РєР°, С†РІРµС‚ Рё РІРѕР·СЂР°СЃС‚ (РёР»Рё РґСЂСѓРіРёРµ РїР°СЂР°РјРµС‚СЂС‹ РЅР° РІР°С€Рµ СѓСЃРјРѕС‚СЂРµРЅРёРµ).
     */
    /*
    1. РЎРѕР·РґР°Р№С‚Рµ РјРЅРѕР¶РµСЃС‚РІРѕ, РІ РєРѕС‚РѕСЂРѕРј Р±СѓРґСѓС‚ С…СЂР°РЅРёС‚СЊСЃСЏ СЌРєР·РµРјРїР»СЏСЂС‹ РєР»Р°СЃСЃР° Cat - HashSet<Cat>.
    РџРѕРјРµСЃС‚РёС‚Рµ РІ РЅРµРіРѕ РЅРµРєРѕС‚РѕСЂРѕРµ РєРѕР»РёС‡РµСЃС‚РІРѕ РѕР±СЉРµРєС‚РѕРІ.
    2. РЎРѕР·РґР°Р№С‚Рµ 2 РёР»Рё Р±РѕР»РµРµ РєРѕС‚РѕРІ СЃ РѕРґРёРЅР°РєРѕРІС‹РјРё РїР°СЂР°РјРµС‚СЂР°РјРё РІ РїРѕР»СЏС…. РџРѕРјРµСЃС‚РёС‚Рµ РёС… РІРѕ РјРЅРѕР¶РµСЃС‚РІРѕ.
    РЈР±РµРґРёС‚РµСЃСЊ, С‡С‚Рѕ РІСЃРµ РѕРЅРё СЃРѕС…СЂР°РЅРёР»РёСЃСЊ РІРѕ РјРЅРѕР¶РµСЃС‚РІРѕ.
    3. РЎРѕР·РґР°Р№С‚Рµ РјРµС‚РѕРґ public boolean equals(Object o)
    РџСЂРѕРїРёС€РёС‚Рµ РІ РЅС‘Рј Р»РѕРіРёРєСѓ СЃСЂР°РІРЅРµРЅРёСЏ РєРѕС‚РѕРІ РїРѕ РїР°СЂР°РјРµС‚СЂР°Рј, С…СЂР°РЅРёРјС‹Рј РІ РїРѕР»СЏС….
    РўРѕ РµСЃС‚СЊ, РјРµС‚РѕРґ РґРѕР»Р¶РµРЅ РІРѕР·РІСЂР°С‰Р°С‚СЊ true, С‚РѕР»СЊРєРѕ РµСЃР»Рё Р·РЅР°С‡РµРЅРёСЏ РІРѕ РІСЃРµС… РїРѕР»СЏС… СЃСЂР°РІРЅРёРІР°РµРјС‹С… РѕР±СЉРµРєС‚РѕРІ СЂР°РІРЅС‹.
    4. Р’С‹РІРµРґРёС‚Рµ СЃРЅРѕРІР° СЃРѕРґРµСЂР¶РёРјРѕРµ РјРЅРѕР¶РµСЃС‚РІР° РёР· РїСѓРЅРєС‚Р° 2, СѓР±РµРґРёС‚РµСЃСЊ, С‡С‚Рѕ РґСѓР±Р»РёРєР°С‚С‹ СѓРґР°Р»РёР»РёСЃСЊ.
     */
    private String name;
    private int age;
    private String owner;
    private String poroda;
    private List<String> healthHistory;

    public Cat(String name, int age, String owner, String poroda) {
        this.name = name;
        this.age = age;
        this.owner = owner;
        this.poroda = poroda;
        healthHistory = new ArrayList<>();
    }

    public void addInHistory(String message){
        healthHistory.add(message);
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public String toString() {
        return "name: " + name + ", age: " + age + ", owner: " + owner + ", poroda: " + poroda;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj){
            return true;
        }
        if (!(obj instanceof Cat)){
            return false;
        }
        Cat cat = (Cat)obj;
        return name.equals(cat.name) && age == cat.age && owner.equals(cat.owner) && poroda.equals(cat.poroda);
    }

    @Override
    public int hashCode() {
        return name.hashCode() + 7*age + 11*owner.hashCode() + 17*poroda.hashCode();
    }
}



import java.util.*;

public class Main {
    public static void main(String[] args) {
        Cat cat1 = new Cat("Р’Р°СЃСЊРєР°", 10, "Р’Р°СЃРёР»РёР№ РџРµС‚СЂРѕРІРёС‡", "РљРѕСЂРЅРёС€СЂРµРєСЃ");
        Cat cat2 = new Cat("РњСѓСЂР·РёРє", 8, "РРІР°РЅ", "РњРµР№РЅРєСѓРЅ");
        Cat cat3 = new Cat("РњСѓСЂР·РёРє", 8, "РРІР°РЅ", "РњРµР№РЅРєСѓРЅ");
        Cat cat4 = new Cat("Р’Р°СЃРёР»РёСЃР°", 8, "РџРµС‚СЂ", "РќРµРёР·РІРµСЃС‚РЅР°");
        System.out.println(cat1);
        System.out.println(cat2);
        System.out.println(cat3);
        System.out.println(cat4);

        Set<Cat> cats = new HashSet<>();
        cats.add(cat1);
        cats.add(cat2);
        cats.add(cat3);
        cats.add(cat4);

        System.out.println();
        for (Cat cat: cats){
            if (cat.getAge() == 8){
                System.out.println(cat);
            }
        }
    }

    static void ex1(){
        /*
        1. РќР°РїРёС€РёС‚Рµ РјРµС‚РѕРґ, РєРѕС‚РѕСЂС‹Р№ Р·Р°РїРѕР»РЅРёС‚ РјР°СЃСЃРёРІ РёР· 1000 СЌР»РµРјРµРЅС‚РѕРІ СЃР»СѓС‡Р°Р№РЅС‹РјРё С†РёС„СЂР°РјРё РѕС‚ 0 РґРѕ 24.
        2. РЎРѕР·РґР°Р№С‚Рµ РјРµС‚РѕРґ, РІ РєРѕС‚РѕСЂС‹Р№ РїРµСЂРµРґР°Р№С‚Рµ Р·Р°РїРѕР»РЅРµРЅРЅС‹Р№ РІС‹С€Рµ РјР°СЃСЃРёРІ Рё СЃ РїРѕРјРѕС‰СЊСЋ Set РІС‹С‡РёСЃР»РёС‚Рµ РїСЂРѕС†РµРЅС‚
        СѓРЅРёРєР°Р»СЊРЅС‹С… Р·РЅР°С‡РµРЅРёР№ РІ РґР°РЅРЅРѕРј РјР°СЃСЃРёРІРµ Рё РІРµСЂРЅРёС‚Рµ РµРіРѕ РІ РІРёРґРµ С‡РёСЃР»Р° СЃ РїР»Р°РІР°СЋС‰РµР№ Р·Р°РїСЏС‚РѕР№.
        Р”Р»СЏ РІС‹С‡РёСЃР»РµРЅРёСЏ РїСЂРѕС†РµРЅС‚Р° РёСЃРїРѕР»СЊР·СѓР№С‚Рµ С„РѕСЂРјСѓР»Сѓ:
        РїСЂРѕС†РµРЅС‚ СѓРЅРёРєР°Р»СЊРЅС‹С… С‡РёСЃРµР» = РєРѕР»РёС‡РµСЃС‚РІРѕ СѓРЅРёРєР°Р»СЊРЅС‹С… С‡РёСЃРµР» * 100 / РѕР±С‰РµРµ РєРѕР»РёС‡РµСЃС‚РІРѕ С‡РёСЃРµР» РІ РјР°СЃСЃРёРІРµ.
         */
        Integer[] arr = createArray(0, 24, 1000);
//        System.out.println(Arrays.toString(arr));
        double percent = unic(arr);
        System.out.println("РџСЂРѕС†РµРЅС‚ СѓРЅРёРєР°Р»СЊРЅС‹С… Р·РЅР°С‡РµРЅРёР№: " + percent);
    }
    static double unic(Integer[] arr){
        Set<Integer> set = new HashSet<>(Arrays.asList(arr));
        double percent = set.size() * 100.0 / arr.length;
        return percent;
    }
    static Integer[] createArray(int min, int max, int capacity){
        Integer[] arr = new Integer[capacity];
        for (int i = 0; i < capacity; i++) {
            arr[i] = (int)(Math.random() * (max - min + 1) + min);
        }
        return arr;
    }
    static void ex0(){
        /*
        1. РЎРѕР·РґР°Р№С‚Рµ HashSet, Р·Р°РїРѕР»РЅРёС‚Рµ РµРіРѕ СЃР»РµРґСѓСЋС‰РёРјРё С‡РёСЃР»Р°РјРё: {1, 2, 3, 2, 4, 5, 6, 3}.
        Р Р°СЃРїРµС‡Р°С‚Р°Р№С‚Рµ СЃРѕРґРµСЂР¶РёРјРѕРµ РґР°РЅРЅРѕРіРѕ РјРЅРѕР¶РµСЃС‚РІР°.
        2. РЎРѕР·РґР°Р№С‚Рµ LinkedHashSet, Р·Р°РїРѕР»РЅРёС‚Рµ РµРіРѕ СЃР»РµРґСѓСЋС‰РёРјРё С‡РёСЃР»Р°РјРё: {1, 2, 3, 2, 4, 5, 6, 3}.
        Р Р°СЃРїРµС‡Р°С‚Р°Р№С‚Рµ СЃРѕРґРµСЂР¶РёРјРѕРµ РґР°РЅРЅРѕРіРѕ РјРЅРѕР¶РµСЃС‚РІР°.
        3. РЎРѕР·РґР°Р№С‚Рµ TreeSet, Р·Р°РїРѕР»РЅРёС‚Рµ РµРіРѕ СЃР»РµРґСѓСЋС‰РёРјРё С‡РёСЃР»Р°РјРё: {1, 2, 3, 2, 4, 5, 6, 3}.
        Р Р°СЃРїРµС‡Р°С‚Р°Р№С‚Рµ СЃРѕРґРµСЂР¶РёРјРѕРµ РґР°РЅРЅРѕРіРѕ РјРЅРѕР¶РµСЃС‚РІР°.
         */
        Integer[] arr = new Integer[]{3, 1, 2, 2, 6, 4, 5, 3};
        Set<Integer> set1= new HashSet<>(Arrays.asList(arr));
        Set<Integer> set2= new LinkedHashSet<>(Arrays.asList(arr));
        Set<Integer> set3= new TreeSet<>(Arrays.asList(arr));
        System.out.println(set1);
        System.out.println(set2);
        System.out.println(set3);
    }
}
